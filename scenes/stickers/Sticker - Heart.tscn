[gd_scene load_steps=27 format=2]

[ext_resource path="res://assets/Shine/shine017.png" type="Texture" id=1]
[ext_resource path="res://assets/Shine/shine015.png" type="Texture" id=2]
[ext_resource path="res://assets/Shine/shine009.png" type="Texture" id=3]
[ext_resource path="res://assets/Shine/shine012.png" type="Texture" id=4]
[ext_resource path="res://assets/Shine/shine011.png" type="Texture" id=5]
[ext_resource path="res://assets/Shine/shine014.png" type="Texture" id=6]
[ext_resource path="res://assets/Shine/shine013.png" type="Texture" id=7]
[ext_resource path="res://assets/Shine/shine016.png" type="Texture" id=8]
[ext_resource path="res://assets/Shine/shine018.png" type="Texture" id=9]
[ext_resource path="res://assets/Shine/shine004.png" type="Texture" id=10]
[ext_resource path="res://assets/Shine/shine003.png" type="Texture" id=11]
[ext_resource path="res://assets/Shine/shine007.png" type="Texture" id=12]
[ext_resource path="res://assets/Shine/shine002.png" type="Texture" id=13]
[ext_resource path="res://assets/Shine/shine006.png" type="Texture" id=14]
[ext_resource path="res://assets/Shine/shine000.png" type="Texture" id=15]
[ext_resource path="res://assets/Sticker - Heart.png" type="Texture" id=16]
[ext_resource path="res://assets/Shine/shine008.png" type="Texture" id=17]
[ext_resource path="res://assets/Shine/shine001.png" type="Texture" id=18]
[ext_resource path="res://assets/Shine/shine005.png" type="Texture" id=19]
[ext_resource path="res://assets/Shine/shine019.png" type="Texture" id=20]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
 
uniform sampler2D mask_tex;
uniform sampler2D over_tex;
uniform float opacity : hint_range(0, 1, 0.01);
 
vec4 mixcolor(vec4 c1, vec4 c2, float percent) {
    vec4 newcolor = vec4(0.0);
    float c2alpha_new = (c2.a * percent);
    newcolor.a = (c2.a + c1.a) - (c1.a * c2.a); // new alpha
    newcolor.rgb = (c1.rgb * c1.a * (1.0f - c2alpha_new) + c2.rgb * c2alpha_new) / newcolor.a; // set color blend
    newcolor.a *= c1.a; // remove any blank pixels on mask
   
    return newcolor;
}
 
void fragment() {
    vec4 base = texture(mask_tex, UV);
    vec4 over = texture(over_tex, UV);
   
    COLOR = mixcolor(base, over, opacity);
   
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/opacity = 1.0
shader_param/mask_tex = ExtResource( 16 )
shader_param/over_tex = ExtResource( 20 )

[sub_resource type="GDScript" id=3]
script/source = "extends RigidBody2D

var resetState = false
var resetGravity = false
var state

remote var pos = Vector2.ZERO
remote var rot = 0

###

sync func hit(posFrom, inaccuracyX, inaccuracyY):
	if self.position.x - posFrom.x <= 0:
		self.linear_velocity /= -3	#reverse velocity to make a hit more powerful when falling
		self.apply_impulse(Vector2(inaccuracyX,inaccuracyY), Vector2(-100, -600))
	else:
		self.linear_velocity /= -3	#reverse velocity to make a hit more powerful when falling
		self.apply_impulse(Vector2(inaccuracyX,inaccuracyY), Vector2(100, -600))
	rpc(\"requestState\", \"hit\")


func _physics_process(delta):
	if(Connector.connected || Server.created):
		if(is_network_master()):
			rset(\"pos\", self.position)
			rset(\"rot\", self.rotation)
		else:
			mode = RigidBody2D.MODE_KINEMATIC
			position = pos
			rotation = rot

###

#Animation
sync func requestState(requestedState):
	match $AnimationPlayer.current_animation:
		\"Spawn\":
			pass
		\"hit\":
			pass
		_:
			if $AnimationPlayer.has_animation(requestedState):
				$AnimationPlayer.play(requestedState)
				state = requestedState

func _on_AnimationPlayer_animation_finished(anim_name):
	if anim_name == \"Spawn\":
		gravity_scale = 10
		apply_central_impulse(Vector2(0.0, 0.0))
	rpc(\"requestState\", \"idle\")

#Shine
func _on_Timer_timeout():
	$ShinePlayer.play(\"Shine\")

#Reset
sync func reset():
	createParticles()
	resetState = true
	
func _integrate_forces(state):
	if resetState == true:
		if $AnimationPlayer.is_playing():
			$AnimationPlayer.seek(0.0, true)
		state.transform = Transform2D(0.0, Vector2(512, 168))
		linear_velocity = Vector2.ZERO
		angular_velocity = 0.0
		gravity_scale = 0.0
		rpc(\"requestState\", \"Spawn\")
		resetState = false

func createParticles():
	var emitter = load(\"res://scenes/particles/HeartSpread.tscn\").instance()
	get_parent().add_child(emitter)
	emitter.position = position
"

[sub_resource type="Animation" id=4]
resource_name = "Spawn"
length = 1.5
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1.5 ),
"transitions": PoolRealArray( 0.5, 1 ),
"update": 0,
"values": [ Vector2( 2, 2 ), Vector2( 3, 3 ) ]
}

[sub_resource type="Animation" id=5]
resource_name = "hit"
length = 0.2
step = 0.01
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0.02, 0.2 ),
"transitions": PoolRealArray( -2, -2 ),
"update": 0,
"values": [ Vector2( 2.7, 2.7 ), Vector2( 3, 3 ) ]
}

[sub_resource type="Animation" id=6]
length = 0.45
step = 0.025
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/over_tex")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3, 0.325, 0.35, 0.375, 0.4, 0.425, 0.45 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ ExtResource( 15 ), ExtResource( 18 ), ExtResource( 13 ), ExtResource( 11 ), ExtResource( 10 ), ExtResource( 19 ), ExtResource( 14 ), ExtResource( 12 ), ExtResource( 17 ), ExtResource( 3 ), ExtResource( 5 ), ExtResource( 4 ), ExtResource( 7 ), ExtResource( 6 ), ExtResource( 2 ), ExtResource( 8 ), ExtResource( 1 ), ExtResource( 9 ), ExtResource( 20 ) ]
}

[node name="Sticker - Heart" type="RigidBody2D"]
material = SubResource( 2 )
script = SubResource( 3 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/Spawn = SubResource( 4 )
anims/hit = SubResource( 5 )

[node name="ShinePlayer" type="AnimationPlayer" parent="."]
anims/Shine = SubResource( 6 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
scale = Vector2( 3, 3 )
texture = ExtResource( 16 )
__meta__ = {
"_editor_description_": ""
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
scale = Vector2( 3, 3 )
polygon = PoolVector2Array( -7.01454, -4.5314, -6.97977, 1.46627, -2.0078, 6.47301, 2.0428, 6.47301, 6.99739, 1.51842, 7.03216, -4.46186, 5.01555, -6.51323, -4.99794, -6.53062 )

[node name="Timer" type="Timer" parent="."]
wait_time = 3.0
autostart = true
[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
[connection signal="animation_finished" from="ShinePlayer" to="." method="_on_AnimationPlayer_animation_finished"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
